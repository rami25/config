
snippet inv
template <typename T> T inverse(T a, T m) {
	T u = 0, v = 1;
	while (a != 0) {
		T t = m / a;
		m -= t * a; swap(a, m);
		u -= t * v; swap(u, v);
	}
	assert(m == 1);
	return u;
}
endsnippet

snippet minv
template <typename T> T minv(T a, T m){
	assert(0 < a && a < m);
	if(a == 1) return 1;
	return m - minv(m % a, a) * m / a;
}
endsnippet

snippet phi
template<typename T> T phi(T n){
	T res = n;
	for(T i = 2, d = 1; i * i <= n; i += d, d = 2){
		if(n % i == 0){
			while(n % i == 0) n /= i;
			res -= res / i;
		}
	}
	if(n > 1) res -= res / n;
	return res;
}
endsnippet

snippet lphi
const int N = ${0:};
int phi[N+1];
void lphi(){
	for(int i = 0; i <= N; i++) phi[i] = i;
	for(int i = 2; i <= N; i++)
		if(phi[i] == i)
			for(int j = i; j <= N; j += i)
				phi[j] -= phi[j] / i;
}
endsnippet
