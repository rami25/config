snippet fen
template <class T = int> struct fenwick { ${0: }
    vector<T> bit, val;
    int n;

    fenwick() {};

    fenwick(int N) {
        n = N+1; 
        bit.resize(n+1);
        val.resize(n+1);
    }

	fenwick(vector<T> ar){ // 0-indexed
		n = (int)ar.size();
		val = ar;
		bit = ar; bit.insert(bit.begin(), 0);
		for(int i = 1; i <= n; i++){
			int p = i+(i&-i);
			if(p <= n) bit[p] += bit[i];
		}
	}

    void add(int pos, T delta) {
        val[pos] += delta;
        for (pos++; pos <= n; pos += pos&-pos) bit[pos] += delta;
    }

    void set(int pos, T v) {
        add(pos, v - val[pos]);
    }

    T query(int pos) {
        T res = 0;
        for (pos++; pos; pos -= pos&-pos) res += bit[pos];
        return res;
    }

    T query(int l, int r) { 
        return query(r) - query(l-1);
   }
};

endsnippet
